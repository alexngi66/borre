<HTML>
<HEAD><TITLE>RTCM2ASC Documentation</TITLE></HEAD>
<BODY bgcolor="#FFFFFF" text="#000000">
<FONT face="Arial">
<H1>RTCM2ASC rel 1.0</H1>
This document describes the design and use of the DOS program RTCM2ASC.<BR>
The program converts the binary RTCM format into an ASCII format that can be read by mathematical tools like Matlab<SUP>TM</SUP>.<BR>
RTCM2ASC operates in a batch processing mode where the RTCM messages are read from a binary file and converted to ASCII format.<BR>
<UL type="square">
<LI><B>Input:</B> Binary file containing RTCM messages
<LI><B>Output:</B> Text files for each message type in ASCII format 
</UL>
Release 1.0 currently supports message types 1, 2, 3, 6, 16, 18 and 19 but can be easily modified to include other types and functionalities should the need present itself.<BR>
<BR>
<H4>Input file</H4>
Some restrictions apply to the input file:
<UL type="square">
<LI>Filename must be "<TT>rtcmout.bin</TT>"
<LI>Each RTCM message must be on a seperate line. This means the binary sequence must be terminated by a "carriage return" and a "line feed" char (<TT>CrLf</TT>)
<LI>Use the "6-of-8" bitpacking method (described below under <I>The RTCM standard</I>)
<LI>Otherwise follow the RTCM standard as described in the official documentation<SUP><A HREF="#ref1">1</A></SUP>
</UL>
When using the Z-12 receiver from Ashtech to generate RTCM corrections it is possible to define the terminating symbols as either <TT>CrLf</TT>, <TT>Cr</TT> or none<SUP><A HREF="#ref2">2</A></SUP>. The program can be easily rewritten to use any other termination string, but it will require substantial extra code to allow for unterminated messages.<BR>
<BR>
An example of a valid input file can be found here: <A HREF="rtcmout.bin"><TT>rtcmout.bin</TT></A><BR>
<H4>Output files</H4>
The text files generated by the program will be named <TT>mtype1.txt</TT>, <TT>mtype2.txt</TT> and so forth and placed in the same directory as the program and input file resides.<BR>
This means a seperate file will be generated for each message type. If a supported message type is not found in the input file the corresponding text file will be empty.<BR>
By use of command line arguments it is possible to determine exactly which part of the RTCM data that should be stored in the output files. Hence the exact structure of the output depends entirely on these arguments.<BR>
Each line (or row) in the output file corresponds to a single RTCM message and each column represents a particular piece of data from this message.<BR>
If the number of satellites change within the file so will the number of columns, and special care must be taken when using the data in programs such as Matlab that require a constant number of columns and rows.<BR>
<BR>
An example of some output files can be found here: <A HREF="mtype1.txt"><TT>mtype1.txt</TT></A>, <A HREF="mtype2.txt"><TT>mtype2.txt</TT></A> and <A HREF="mtype3.txt"><TT>mtype3.txt</TT></A><BR>
<BR>
Note: These output files were generated from the above input file using the "<TT>-default</TT>" command line argument.
<H4>The RTCM standard</H4>
The message format is illustrated in figure 1.1:<BR>
<BR>
<CENTER><IMG src="gpsword.gif" width="451" height="85" border="0" vspace="10"><BR>
<I><FONT size="-1">Fig 1.1: The thirty-bit GPS word</FONT></I></CENTER><BR>
Each message consists of two or more thirty-bit words. The first two words of any message contains the header information which is common to all message types.<BR>
Of the thirty bits, 24 carry the data and 6 are used for parity. The parity algorithm used is identical to the one used in standard GPS data transmission<SUP><A HREF="#ref3">3</A></SUP>.
This means that for each word to be decoded correctly bits 29 and 30 from the previous word must be known, which poses some initialization problems.<BR>
When these thirty-bit words must be represented in an eight-bit environment a special "6 of 8" format must be used. Each byte contains 6 bits from the GPS word, setting the remaining 2 bits "marking" and "spacing" respectively (1 and 0) as shown in figure 1.2:<BR>
<BR>
<CENTER><IMG src="sixof8.gif" width="601" height="85" border="0" vspace="10"><BR>
<I><FONT size="-1">Fig 1.2: The five byte representation using the "6 of 8" format</FONT></I></CENTER><BR>
The RTCM standard specifies that the bits must be ordered according to the "Most Significant Bit First Rule" whereas the ANSI X3.15-1976 standard requires the bits to be arranged according to the "Least Significant Bit First Rule". This results in a "byte roll" where the order
of the bits within the byte is reversed.<BR>
As a result of the "6 of 8" format each GPS word takes up 5 bytes which means the entire message must have a size which is a whole multiple of five.
<H4>Program design</H4>
A simplified structure of the program is shown in figure 1.3. Basically the program consists of two loops. The first (outer) loop reads one line in the input file at a time, and starts right after the input/output files have been opened for reading/writing.<BR>
Each line of input corresponds to an RTCM message, and by reading the header information it is possible to determine how many bytes to decode in each message. Also, the message type is encoded in the header and from this information it is possible to call the correct function to decode a particular message. Should it prove necessary to extend the program's capability with other message types, this modular structure ensures that this task will require a minimum effort.
<BR>
<CENTER>
<IMG src="algorithm.gif" width="108" height="334" border="0" vspace="10"><BR>
<I><FONT size="-1">Fig 1.3: The program structure</FONT></I></CENTER><BR>
The second (inner) loop performs the actual decoding of the message by assembling five bytes into a GPS word and converting the binary format into ASCII.<BR>
Some error checks and warnings are built into the program. If the length of a given message is not a multiple of five an error message is produced. This often happens when some transmission errors have occured during the creation of the input file from the RTCM output of the receiver, and some part of the message has been lost.<BR>
If the program encounters a message type which is not currently supported a warning is issued on the screen stating the type of message and line number. This as well arises as a consequence of partly received messages. As the decoding depends of the parity of the previous message, a transmission error will also affect subsequent data. A hint of this might be that messages are reported as there bitreversed counterparts (e.g. 1 -> 63, 2 -> 62, 18 -> 46 and so on ...) a result of incorrect parity removal.
<H4>Command line parameters</H4>
To control exactly which part of the data should be saved to file a whole array of command line arguments can be used when calling the program. Each type of data is set by a specific flag. Table 1.1 shows the complete list of data accessible from the currently supported message types. Also shown is the flag to use and the type of message in which the data is located.<BR>
<BR>
<CENTER>

<TABLE cellpadding="1" cellspacing="1" border="0">
<TR>
	<TD bgcolor="#8080FF"><B>Name</B></TD>
	<TD bgcolor="#8080FF" width="100"><B>Message</B></TD>
	<TD bgcolor="#8080FF"><B>Flag</B></TD>
</TR>
<TR>
	<TD><FONT size="-1">PREAMBLE</FONT></TD>
	<TD align="center"><FONT size="-1">All</FONT></TD>
	<TD><TT>-pre</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">FRAME ID/MSG TYPE</FONT></TD>
	<TD align="center"><FONT size="-1">All</FONT></TD>
	<TD><TT>-mtype</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">REFERENCE STATION ID</FONT></TD>
	<TD align="center"><FONT size="-1">All</FONT></TD>
	<TD><TT>-refid</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">MODIFIED Z-COUNT</FONT></TD>
	<TD align="center"><FONT size="-1">All</FONT></TD>
	<TD><TT>-zcount</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">SEQUENCE NO.</FONT></TD>
	<TD align="center"><FONT size="-1">All</FONT></TD>
	<TD><TT>-seqno</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">NO. OF DATA WORDS</FONT></TD>
	<TD align="center"><FONT size="-1">All</FONT></TD>
	<TD><TT>-length</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">STATION HEALTH</FONT></TD>
	<TD align="center"><FONT size="-1">All</FONT></TD>
	<TD><TT>-health</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">SCALE FACTOR</FONT></TD>
	<TD align="center"><FONT size="-1">1,2 </FONT></TD>
	<TD><TT>-factor</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">UDRE</FONT></TD>
	<TD align="center"><FONT size="-1">1,2</FONT></TD>
	<TD><TT>-udre</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">SATELLITE ID</FONT></TD>
	<TD align="center"><FONT size="-1">1,2,18,19</FONT></TD>
	<TD><TT>-prn</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">PSEUDORANGE CORRECTION</FONT></TD>
	<TD align="center"><FONT size="-1">1</FONT></TD>
	<TD><TT>-prc</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">RANGE-RATE CORRECTION</FONT></TD>
	<TD align="center"><FONT size="-1">1</FONT></TD>
	<TD><TT>-rrc</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">ISSUE OF DATA</FONT></TD>
	<TD align="center"><FONT size="-1">1,2</FONT></TD>
	<TD><TT>-iod</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">DELTA PSEUDORANGE CORRECTION</FONT></TD>
	<TD align="center"><FONT size="-1">2</FONT></TD>
	<TD><TT>-dprc</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">DELTA RANGE-RATE CORRECTION</FONT></TD>
	<TD align="center"><FONT size="-1">2</FONT></TD>
	<TD><TT>-drrc</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">ECEF POSITION</FONT></TD>
	<TD align="center"><FONT size="-1">3</FONT></TD>
	<TD><TT>-xyz</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">GPS SPECIAL MESSAGE</FONT></TD>
	<TD align="center"><FONT size="-1">16</FONT></TD>
	<TD><TT>-msg</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">FREQUENCY INDICATOR</FONT></TD>
	<TD align="center"><FONT size="-1">18,19</FONT></TD>
	<TD><TT>-freq</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">GNSS TIME OF MEASUREMENT</FONT></TD>
	<TD align="center"><FONT size="-1">18,19</FONT></TD>
	<TD><TT>-extime</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">MULTIPLE MESSAGE INDICATOR</FONT></TD>
	<TD align="center"><FONT size="-1">18,19</FONT></TD>
	<TD><TT>-multi</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">C/A-CODE / P-CODE INDICATOR</FONT></TD>
	<TD align="center"><FONT size="-1">18,19</FONT></TD>
	<TD><TT>-pca</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">GPS/GLONASS SATELLITE INDICATOR</FONT></TD>
	<TD align="center"><FONT size="-1">18,19</FONT></TD>
	<TD><TT>-gpsglo</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">DATA QUALITY</FONT></TD>
	<TD align="center"><FONT size="-1">18,19</FONT></TD>
	<TD><TT>-dqual</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">CUMULATIVE LOSS OF CONTINUITY INDICATOR</FONT></TD>
	<TD align="center"><FONT size="-1">18</FONT></TD>
	<TD><TT>-cslip</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">CARRIER PHASE</FONT></TD>
	<TD align="center"><FONT size="-1">18</FONT></TD>
	<TD><TT>-phase</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">SMOOTHING INTERVAL</FONT></TD>
	<TD align="center"><FONT size="-1">19</FONT></TD>
	<TD><TT>-smooth</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">MULTIPATH ERROR </FONT></TD>
	<TD align="center"><FONT size="-1">19</FONT></TD>
	<TD><TT>-mpe</TT></TD>
</TR>
<TR>
	<TD><FONT size="-1">PSEUDORANGE</FONT></TD>
	<TD align="center"><FONT size="-1">19</FONT></TD>
	<TD><TT>-pr</TT></TD>
</TR>
</TABLE><BR>
<I><FONT size="-1">Table 1.1: An overview of the command-line arguments available</FONT></I></CENTER><BR>
If no arguments are used a special help screen is displayed containing the same information as in table 1.1.<BR>
To avoid incorrect parity removal of the first message the previous (and unknown) parity bits 29 and 30 can be set directly using the flag "<TT>-pXY</TT>" where "X" and "Y" is either 0 or 1. E.g. <TT>"rtcm2asc.exe -p01"</TT> sets bit 29 to "0" and bit 30 to "1".<BR>
A special <TT>"-default"</TT> flag is offered to include only the data which is of general interest:
<UL type="square">
<LI>Modified Z-Count
<LI>Satellite ID number
<LI>Pseudorange corrections
<LI>Range-rate corrections
<LI>Delta Pseudorange corrections
<LI>Delta Range-rate corrections
<LI>Uncorrected Pseudranges
<LI>Uncorrected Carrier Phases
<LI>ECEF Position
<LI>Special GPS message
</UL>
<H4>To Do's</H4>
During use it has become evident that some minor improvements would greatly increase the usability of this program. Because of time constraints these have not been incorporated into this first release but are listed here for future reference.
<UL>
<LI>Make GUI and build it into a Windows application. This would make the program easier to use and command-line arguments could be removed.
<LI>Option to specify a given time period (mod. z-count) for which data should be stored
<LI>Option to pinpoint single satellites (sat. ID's) for which data should be stored.
<LI>Option to pipe RTCM messages into the program using the serial port. This would effectively make the program able to run in real-time mode.
</UL>
Also, one could consider improving on the effects of partly received or damaged messages (if at all possible!?)
<H4>Bibliography</H4>
<BLOCKQUOTE>
<A name="ref1">
1.	<I>RTCM Special Commitee No. 104 (1998). RTCM Recommended Standards For Differential GNSS Service, Version 2.2</I><BR>
<BR>
<A name="ref2">
2.	<I>Ashtech (1995). Z-12 Manual, 2nd Edition</I><BR>
<BR>
<A name="ref3">
3.	<I>U.S. Coast Guard (1995). Global Positioning System Standard Positioning Service Signal Specification, 2nd Edition</I>
</BLOCKQUOTE>
<H4>Download</H4>
The program can be downloaded as a Win32 executable or as C source code. The source code has been successfully compiled using Visual C++ 6.
<UL type="square">
<LI><A HREF="rtcm2asc.exe">Win32 executable</A>
<LI><A HREF="rtcm2asc.c">C source code</A>
</UL>
</FONT>
</BODY>
</HTML>
